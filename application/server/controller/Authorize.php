<?php
/**
 * Created by PhpStorm.
 * User: ADMIN
 * Date: 2019/9/5
 * Time: 16:03
 */
namespace app\server\controller;

use app\common\controller\Server;
use app\server\validate\Authorization;
use think\facade\Cache;
use think\Request;

class Authorize extends Server{

    /**
     * code 过期时间
     * @var int
     */
    private $authcodeExpireTime = 30;

    /**
     * code 过期时间
     * @var int
     */
    private $authtokenExpireTime = 7200;

    private $server;

    private $appurl;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->server = "http://" . \think\facade\Env::get('domain.server');

        $this->appurl = "http://" . \think\facade\Env::get('domain.home');
    }

    /**
     * @describe 获取code
     */
    public function authorizeCode(Request $request){
        $param = $request->get();
        $validate = new Authorization();
        if(!$result = $validate->scene('authcode')->check($param)){
            $this->showMsg(make_ret(500,$validate->getError()));
        }

        $app = config('apps.' . $param['appid']);
        $this->assign('viewData',[
            'app_name' => $app['name'],
            'user' => $this->userInfo(),
            'param' => $param
        ]);
        return $this->fetch();
    }

    public function authcode(Request $request){
        $param = $request->post();
        $validate = new Authorization();
        if(!$result = $validate->scene('authcode')->check($param)){
            $this->showMsg(make_ret(500,$validate->getError()));
        }

        $state = $request->get('state');
        $appid = $param['appid'];
        $redirect_url = $param['redirect_url'];
        $code = key_gen();
        //关联code与用户信息
        Cache::set(gen_cache_code($code,$appid),session_id(),$this->authcodeExpireTime);

        $this->redirect($redirect_url . '?' . http_build_query(['code' => $code,'state' => $state]));
    }

    public function refuse(){
        $this->assign("viewData",[
            'app_url' => $this->appurl
        ]);
        return $this->fetch();
    }

    /**
     * @describe 获取token
     */
    public function authorizeToken(Request $request){
        $validate = new Authorization();
        if(!$validate->scene('authtoken')->check($request->param())){
            $this->showMsg(make_ret(500,$validate->getError()));
        }

        $appid = $request->param('appid');
        $code = $request->param('code');

        $auth_session_id = Cache::get(gen_cache_code($code,$appid));
        if(!$auth_session_id){
            $this->showMsg(make_ret(501,'invalid code'));
        }
        session_id($auth_session_id);

        $token = key_gen();
        $username = $this->userInfo('username');
        //生成token后清除之前的token
        $old_token_cache = Cache::get(gen_cache_usertoken($username));
        Cache::set($old_token_cache,null);
        //关联用户到新的token（是为了可以及时清除旧的token  存mysql关联时可以不需要双向关联）
        Cache::set(gen_cache_usertoken($username),$token);
        //关联token到用户信息
        Cache::set(gen_cache_token($token,$appid),$username);
        $this->showMsg(make_ret(200,'success',['access_token' => $token]));
    }

    /**
     * @describe 获取user信息
     */
    public function authorizeUserInfo(Request $request){
        $validate = new Authorization();
        if(!$validate->scene('resource')->check($request->param())){
            $this->showMsg(make_ret(500,$validate->getError()));
        }

        $username = Cache::get(gen_cache_token($request->param('access_token'),$request->param('appid')));
        if(!$username){
            $this->showMsg(make_ret(500,'invalid token'));
        }

        $user = config('users.' . $username);
        $this->showMsg(make_ret(200,'success',['user' => $user]));
    }

}